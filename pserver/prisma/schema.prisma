// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:Pedan1982@localhost:5432/pcloud2db?schema=public"
}

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String  @unique
  password String
  active   Boolean @default(true)
  roles    Roles   @default(user)

  photos   Photos[]
  Clusters Clusters[]
  Faces    Faces[]
  Shares   Shares[]
  Videos   Videos[]

  @@map("users")
}

model Photos {
  id             String    @id @default(cuid())
  path           String    @unique
  dateCreate     DateTime? @map("date_create")
  longitude      String?
  latitude       String?
  isFacesScanned Boolean   @default(false) @map("is_faces_scaned")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")
  faces  Faces[]

  @@map("photos")
}

model Videos {
  id         String   @id @default(cuid())
  path       String   @unique
  dateCreate DateTime @map("date_create")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
}

model Faces {
  id     String @id @default(cuid())
  path   String @unique
  name   String @default("")
  left   Int?
  right  Int?
  top    Int?
  bottom Int?
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  photo     Photos?   @relation(fields: [photosId], references: [id])
  photosId  String?   @map("photo_id")
  clusters  Clusters? @relation(fields: [clusterId], references: [id])
  clusterId String?   @map("cluster_id")
  userId    String    @map("user_id")

  @@map("faces")
}

model Clusters {
  id String @id @default(cuid())

  key String

  faces Faces[]

  name String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("clusters")
}

model Shares {
  id       String    @id @default(cuid())
  path     String
  type     TypeShare
  password String?
  timeLive DateTime? @map("time_live")
  userId   String
  filename String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("shares")
}

enum Roles {
  user
  admin
}

enum TypeShare {
  folder
  file
}
